from zlapi.models import Message, ThreadType
import os
import importlib
import json
import datetime
import pytz
from config import PREFIX, ADMIN
import modules.bot_info
from modules.tagall import handle_tagall_command
import sys
from modules.menu import ping  
from modules.tagall import ft_vxkiue
sys.path.append('.')  # ho·∫∑c ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c ch·ª©a tagall.py
from modules.tagall import handle_tagall_command
from modules.menu import get_mitaizl  # ƒê√∫ng t√™n file ch·ª©a menuzl
commands = get_mitaizl()

RESET = '\033[0m'
BOLD = '\033[1m'
GREEN = '\033[92m'
RED = '\033[91m'

class CommandHandler:
    def __init__(self, client):
        self.client = client
        self.mitaizl = self.load_mitaizl()
        self.auto_mitaizl = self.load_auto_mitaizl()
        self.adminon = self.load_admin_mode()  # Load tr·∫°ng th√°i Admin Mode
        self.admin_notify_enabled = True  # B·∫≠t th√¥ng b√°o admin m·∫∑c ƒë·ªãnh

    def load_admin_mode(self):
        """ƒê·ªçc tr·∫°ng th√°i Admin Mode t·ª´ file."""
        try:
            with open('modules/cache/admindata.json', 'r') as f:
                data = json.load(f)
                return data.get('adminon', False)
        except (FileNotFoundError, json.JSONDecodeError):
            return False

    def save_admin_mode(self):
        """L∆∞u tr·∫°ng th√°i Admin Mode v√†o file."""
        try:
            os.makedirs('modules/cache', exist_ok=True)
            with open('modules/cache/admindata.json', 'w') as f:
                json.dump({'adminon': self.adminon}, f)
        except Exception as e:
            print(f"L·ªói khi l∆∞u admin mode: {e}")

    def load_mitaizl(self):
        mitaizl = {}
        from modules.tagall import ft_vxkiue
        mitaizl.update(ft_vxkiue())  # ‚Üê th√™m d√≤ng n√†y

        from modules.sms import get_mitaizl
        mitaizl.update(get_mitaizl())
        
        modules_path = 'modules'
        for filename in os.listdir(modules_path):
            if filename.endswith('.py') and filename != '__init__.py':
                module_name = filename[:-3]
                try:
                    module = importlib.import_module(f'{modules_path}.{module_name}')
                    if hasattr(module, 'get_mitaizl'):
                        mitaizl.update(module.get_mitaizl())
                except Exception as e:
                    print(f"{BOLD}{RED}Kh√¥ng th·ªÉ load module: {module_name}. L·ªói: {e}{RESET}")
        return mitaizl

    def load_auto_mitaizl(self):
        """Load c√°c l·ªánh kh√¥ng c·∫ßn prefix t·ª´ folder 'modules/noprefix'."""
        auto_mitaizl = {}
        noprefix_modules_path = 'modules.noprefix'
        noprefix_folder = 'modules/noprefix'
        
        # Ki·ªÉm tra folder noprefix c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(noprefix_folder):
            print(f"{BOLD}{RED}Folder {noprefix_folder} kh√¥ng t·ªìn t·∫°i!{RESET}")
            return auto_mitaizl
            
        for filename in os.listdir(noprefix_folder):
            if filename.endswith('.py') and filename != '__init__.py':
                module_name = filename[:-3]
                try:
                    module = importlib.import_module(f'{noprefix_modules_path}.{module_name}')
                    if hasattr(module, 'get_mitaizl'):
                        noprefix_commands = module.get_mitaizl()
                        auto_mitaizl.update(noprefix_commands)
                        print(f"{BOLD}{GREEN}Da load module noprefix: {module_name} voi {len(noprefix_commands)} lenh{RESET}")
                except Exception as e:
                    print(f"{BOLD}{RED}Khong the load module noprefix: {module_name}. Loi: {e}{RESET}")
        
        print(f"{BOLD}{GREEN}Tong cong da load {len(auto_mitaizl)} lenh noprefix{RESET}")
        return auto_mitaizl

    def notify_admin_activity(self, message, author_id, thread_id, thread_type, command_type="command"):
        """Th√¥ng b√°o admin v·ªÅ ho·∫°t ƒë·ªông bot"""
        if not self.admin_notify_enabled:
            return
            
        # Kh√¥ng th√¥ng b√°o n·∫øu ch√≠nh admin s·ª≠ d·ª•ng
        if str(author_id) == str(ADMIN):
            return
            
        # Ki·ªÉm tra c√≥ n√™n th√¥ng b√°o kh√¥ng (tr√°nh spam)
        if not self.should_notify_admin(author_id, message):
            return
            
        try:
            # L·∫•y th√¥ng tin user
            user_name = self.get_user_name_safe(author_id)
            
            # L·∫•y th·ªùi gian hi·ªán t·∫°i (Vi·ªát Nam)
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            current_time = datetime.datetime.now(vn_tz).strftime('%d/%m/%Y %H:%M:%S')
            
            # T·∫°o th√¥ng b√°o kh√°c nhau cho group v√† chat ri√™ng
            if thread_type == ThreadType.GROUP:
                group_name = self.get_group_name_safe(thread_id)
                notification_text = f"""
ü§ñ BOT ACTIVITY ALERT ü§ñ

üë§ User: {user_name}
üÜî ID: {author_id}
üí¨ {command_type.title()}: "{message}"
üì± Trong Group: {group_name}
üïê Th·ªùi gian: {current_time}

üìç Thread ID: {thread_id}
"""
            else:
                notification_text = f"""
ü§ñ BOT ACTIVITY ALERT ü§ñ

üë§ User: {user_name}
üÜî ID: {author_id}
üí¨ {command_type.title()}: "{message}"
üì± Chat ri√™ng
üïê Th·ªùi gian: {current_time}

üìç Thread ID: {thread_id}
"""
            
            # G·ª≠i th√¥ng b√°o ƒë·∫øn admin v·ªõi Message object
            self.client.sendMessage(
                Message(text=notification_text.strip()),
                ADMIN,
                ThreadType.USER
            )
            
            print(f"‚úÖ ƒê√£ th√¥ng b√°o admin v·ªÅ ho·∫°t ƒë·ªông: {user_name} d√πng '{message}'")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi th√¥ng b√°o admin: {e}")

    def should_notify_admin(self, user_id, command):
        """Ki·ªÉm tra c√≥ n√™n th√¥ng b√°o admin kh√¥ng (tr√°nh spam)"""
        try:
            activity_file = 'modules/cache/user_activity.json'
            activity_data = {}
            
            if os.path.exists(activity_file):
                with open(activity_file, 'r', encoding='utf-8') as f:
                    activity_data = json.load(f)
            
            current_time = datetime.datetime.now()
            user_key = f"{user_id}_{command}"
            
            # Ki·ªÉm tra l·∫ßn cu·ªëi th√¥ng b√°o
            if user_key in activity_data:
                last_notify = datetime.datetime.fromisoformat(activity_data[user_key]['last_notify'])
                # Ch·ªâ th√¥ng b√°o n·∫øu ƒë√£ qu√° 30 ph√∫t
                if (current_time - last_notify).total_seconds() < 1800:  # 30 ph√∫t
                    return False
            
            # C·∫≠p nh·∫≠t th·ªùi gian th√¥ng b√°o
            activity_data[user_key] = {
                'last_notify': current_time.isoformat(),
                'count': activity_data.get(user_key, {}).get('count', 0) + 1
            }
            
            # L∆∞u v√†o file
            os.makedirs(os.path.dirname(activity_file), exist_ok=True)
            with open(activity_file, 'w', encoding='utf-8') as f:
                json.dump(activity_data, f, ensure_ascii=False, indent=2)
            
            return True
            
        except Exception as e:
            print(f"L·ªói ki·ªÉm tra th√¥ng b√°o admin: {e}")
            return False

    def get_user_name_safe(self, user_id):
        """L·∫•y t√™n user an to√†n"""
        try:
            user_info = self.client.fetchUserInfo(user_id)
            if user_info and user_info.userInfo:
                return user_info.userInfo.get(user_id, {}).get('name', f'User_{user_id[-8:]}')
        except:
            pass
        return f'User_{user_id[-8:]}'

    def get_group_name_safe(self, thread_id):
        """L·∫•y t√™n group an to√†n"""
        try:
            group_info = self.client.fetchGroupInfo(thread_id)
            if group_info and group_info.gridInfoMap:
                return group_info.gridInfoMap.get(thread_id, {}).name or f'Group_{thread_id[-8:]}'
        except:
            pass
        return f'Group_{thread_id[-8:]}'

    def handle_command(self, message, author_id, message_object, thread_id, thread_type):
        # N·∫øu l·ªánh l√† adminmode on/off th√¨ b·∫≠t/t·∫Øt Admin Mode
        if message.startswith(PREFIX + 'admin'):
            self.toggle_admin_mode(message, message_object, thread_id, thread_type, author_id)
            return
        
        # Ki·ªÉm tra l·ªánh auto (kh√¥ng c·∫ßn prefix) TR∆Ø·ªöC KHI ki·ªÉm tra admin mode
        auto_command_handler = self.auto_mitaizl.get(message.lower())
        if auto_command_handler:
            print(f"{BOLD}{GREEN}Th·ª±c thi l·ªánh noprefix: {message.lower()}{RESET}")
            
            # Th√¥ng b√°o admin v·ªÅ ho·∫°t ƒë·ªông noprefix
            self.notify_admin_activity(message, author_id, thread_id, thread_type, "noprefix command")
            
            auto_command_handler(message, message_object, thread_id, thread_type, author_id, self.client)
            return
        
        # Ki·ªÉm tra n·∫øu Admin Mode ƒëang b·∫≠t v√† ng∆∞·ªùi g·ª≠i kh√¥ng ph·∫£i admin th√¨ b·ªè qua
        if self.adminon and author_id not in ADMIN:
            return

        # N·∫øu kh√¥ng c√≥ prefix th√¨ b·ªè qua
        if not message.startswith(PREFIX):
            return

        # X·ª≠ l√Ω l·ªánh ch√≠nh
        command_name = message[len(PREFIX):].split(' ')[0].lower()
        command_handler = self.mitaizl.get(command_name)

        if command_handler:
            # Th√¥ng b√°o admin v·ªÅ ho·∫°t ƒë·ªông prefix command
            self.notify_admin_activity(message, author_id, thread_id, thread_type, "prefix command")
            
            command_handler(message, message_object, thread_id, thread_type, author_id, self.client)
        else:
            self.client.sendMessage(
                Message(text=f"Kh√¥ng t√¨m th·∫•y l·ªánh '{command_name}'. H√£y d√πng {PREFIX}menu ƒë·ªÉ bi·∫øt c√°c l·ªánh c√≥ tr√™n h·ªá th·ªëng."),
                thread_id, 
                thread_type
            )

    def toggle_admin_mode(self, message, message_object, thread_id, thread_type, author_id):
        """B·∫≠t/t·∫Øt Admin Mode v·ªõi reply"""
        if author_id in ADMIN:
            if 'on' in message.lower():
                self.adminon = True
                self.save_admin_mode()
                self.client.replyMessage(
                    Message(text="üîì Admin ƒê√£ ƒê∆∞·ª£c B·∫≠t!"),
                    message_object, thread_id, thread_type
                )
            elif 'off' in message.lower():
                self.adminon = False
                self.save_admin_mode()
                self.client.replyMessage(
                    Message(text="üîì Admin ƒê√£ ƒê∆∞·ª£c T·∫Øt!"),
                    message_object, thread_id, thread_type
                )
            else:
                self.client.replyMessage(
                    Message(text="üö¶ Vui l√≤ng ch·ªâ ƒë·ªãnh l·ªánh 'on' ho·∫∑c 'off'."),
                    message_object, thread_id, thread_type
                )
        else:
            self.client.replyMessage(
                Message(text="üö´ Tu·ªïi C·∫∑c ƒê√≤i X√†i!"),
                message_object, thread_id, thread_type
            )
            
def is_wlgr(gr_id):
    wl_list = load_data(BOTSET_FILE)
    if "5" not in wl_list:
        wl_list["5"] = {}
    if "whitelist" not in wl_list["5"]:
        wl_list["5"]["whitelist"] = []
    ad_id = wl_list["5"]["whitelist"]
    gr_id = int(gr_id)
    return gr_id in ad_id

def add_wlgr(self,message_object,thread_id,thread_type,author_id):
    author_id = int(author_id)
    if not is_admin(str(author_id)):
        messages = "‚ùåB·∫°n kh√¥ng ph·∫£i l√† owner =))"
        self.replyMessage(
                Message(text=str(messages)),
                message_object,
                thread_id=thread_id,
                thread_type=thread_type,
            )
        return
    if thread_type != ThreadType.GROUP:
        messages = "‚ùåVui l√≤ng d√πng trong nh√≥m"
        self.replyMessage(
                Message(text=str(messages)),
                message_object,
                thread_id=thread_id,
                thread_type=thread_type,
            )
        return
    botset1 = load_data(BOTSET_FILE)
    thread_id=int(thread_id)
    if "5" not in botset1:
        botset1["5"] = {}
    if "whitelist" not in botset1["5"]:
        botset1["5"]["whitelist"] = []
    if thread_id in botset1["5"]["whitelist"]:  # Tr√°nh th√™m tr√πng l·∫∑p
        messages = "‚ùåGR ƒê√£ ƒë∆∞·ª£c whitelist"
        self.replyMessage(
                Message(text=str(messages)),
                message_object,
                thread_id=thread_id,
                thread_type=thread_type,
            )
        return
    if thread_id not in botset1["5"]["whitelist"]:  # Tr√°nh th√™m tr√πng l·∫∑p
        botset1["5"]["whitelist"].append(int(thread_id))
    save_data(BOTSET_FILE,botset1)
    gr = self.fetchGroupInfo(thread_id)
    gr_name = gr['gridInfoMap'][str(thread_id)].name
    length = len(str(gr_name))
    bold = MessageStyle(style="bold", length=length, offset=10,auto_format=False)
    style = MultiMsgStyle([bold])
    messages = f"‚úî ƒê√£ th√™m {gr_name} v√†o danh s√°ch group whitelist"
    self.replyMessage(
            Message(text=str(messages),style=style),
            message_object,
            thread_id=thread_id,
            thread_type=thread_type,
        )
    return

def rm_wlgr(self,message_object,thread_id,thread_type,author_id):
    author_id = int(author_id)
    if not is_admin(str(author_id)):
        messages = "‚ùåB·∫°n kh√¥ng ph·∫£i l√† owner =))"
        self.replyMessage(
                Message(text=str(messages)),
                message_object,
                thread_id=thread_id,
                thread_type=thread_type,
            )
        return
    if thread_type != ThreadType.GROUP:
        messages = "‚ùåVui l√≤ng d√πng trong nh√≥m"
        self.replyMessage(
                Message(text=str(messages)),
                message_object,
                thread_id=thread_id,
                thread_type=thread_type,
            )
        return
    botset1 = load_data(BOTSET_FILE)
    if "5" not in botset1:
        botset1["5"] = {}
    if "whitelist" not in botset1["5"]:
        botset1["5"]["whitelist"] = []
    if int(thread_id) in botset1["5"]["whitelist"]:  # Tr√°nh th√™m tr√πng l·∫∑p
        botset1["5"]["whitelist"].remove(int(thread_id))
    save_data(BOTSET_FILE,botset1)
    gr = self.fetchGroupInfo(thread_id)
    gr_name = gr['gridInfoMap'][str(thread_id)].name
    length = len(str(gr_name))
    bold = MessageStyle(style="bold", length=length, offset=10,auto_format=False)
    messages = f"‚úî ƒê√£ xo√° {gr_name} v√†o danh s√°ch group whitelist"
    style = MultiMsgStyle([bold])
    self.replyMessage(
            Message(text=str(messages),style=style),
            message_object,
            thread_id=thread_id,
            thread_type=thread_type,
        )
    return

def is_admin(author_id):
    settings = read_settings()
    admin_bot = settings.get("admin_bot", [])
    if author_id in admin_bot:
        return True
    else:
        return False

def handle_bot_admin(bot):
    settings = read_settings()
    admin_bot = settings.get("admin_bot", [])
    if bot.uid not in admin_bot:
        admin_bot.append(bot.uid)
        settings['admin_bot'] = admin_bot
        write_settings(settings)
        print(f"ƒê√£ th√™m üëë{get_user_name_by_id(bot, bot.uid)} üÜî {bot.uid} cho l·∫ßn ƒë·∫ßu ti√™n kh·ªüi ƒë·ªông v√†o danh s√°ch Admin ü§ñBOT ‚úÖ")


def get_allowed_thread_ids():
    """L·∫•y danh s√°ch c√°c thread ID ƒë∆∞·ª£c ph√©p t·ª´ setting.json."""
    settings = read_settings()
    return settings.get('allowed_thread_ids', [])

def bot_on_group(bot, thread_id):
    """Th√™m thread_id v√†o danh s√°ch ƒë∆∞·ª£c ph√©p."""
    try:
        settings = read_settings()
        allowed_thread_ids = settings.get('allowed_thread_ids', [])
        group = bot.fetchGroupInfo(thread_id).gridInfoMap[thread_id]

        if thread_id not in allowed_thread_ids:
            allowed_thread_ids.append(thread_id)
            settings['allowed_thread_ids'] = allowed_thread_ids
            write_settings(settings)

            return f"ü§ñBOT ƒë√£ ƒë∆∞·ª£c b·∫≠t trong Group: {group.name}\n"
    except Exception as e:
        print(f"Error: {e}")
        return "ƒê√£ x·∫£y ra l·ªói g√¨ ƒë√≥ü§ß"

def bot_off_group(bot, thread_id):
    """Lo·∫°i b·ªè thread_id kh·ªèi danh s√°ch ƒë∆∞·ª£c ph√©p."""
    try:
        settings = read_settings()
        allowed_thread_ids = settings.get('allowed_thread_ids', [])
        group = bot.fetchGroupInfo(thread_id).gridInfoMap[thread_id]

        if thread_id in allowed_thread_ids:
            allowed_thread_ids.remove(thread_id)
            settings['allowed_thread_ids'] = allowed_thread_ids
            write_settings(settings)

            return f"ü§ñBOT ƒë√£ ƒë∆∞·ª£c t·∫Øt trong Group: {group.name}\n"
    except Exception as e:
        print(f"Error: {e}")