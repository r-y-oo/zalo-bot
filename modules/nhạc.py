import os
import random
import re
import time
import requests
from zlapi import *
from zlapi.models import *
from bs4 import BeautifulSoup
from fake_useragent import UserAgent 

des = {
    'version': "1.x.x",
    'credits': "DzixTool",
    'description': "Nh·∫°c"
}

def handle_nhac_command(message, message_object, thread_id, thread_type, author_id, client):
    content = message.strip().split()
    
    # T·∫°o v√† g·ª≠i tin nh·∫Øn
    action = "‚úÖ"
    client.sendReaction(message_object, action, thread_id, thread_type, reactionType=75)

    if len(content) < 2:
        error_message = Message(text="ùëâùë¢ùëñ ùêøùëúùëõùëî ùëÅ‚Ñéùëéùëù ùëáùëíùëõ ùêµùëéùëñ ùêªùëéùë° ùê∑ùëí ùêµùëúùë° ùëáùëñùëö ùêæùëñùëíùëö ùëê‚Ñéùëú ùêµùëéùëõ‚ÄºÔ∏è")
        client.replyMessage(error_message, message_object, thread_id, thread_type,ttl=6000000000)
        return

    tenbaihat = ' '.join(content[1:]) 

    def get_client_id():
        """L·∫•y client ID t·ª´ SoundCloud v√† l∆∞u v√†o t·ªáp n·∫øu ch∆∞a c√≥."""
        client_id_file = 'client_id.txt'
        
        # X√≥a client_id c≈© n·∫øu c√≥ ƒë·ªÉ l·∫•y m·ªõi
        if os.path.exists(client_id_file):
            try:
                os.remove(client_id_file)
                print("ƒê√£ x√≥a client_id c≈©, ƒëang l·∫•y client_id m·ªõi...")
            except:
                pass

        try:
            res = requests.get('https://soundcloud.com/', headers=get_headers(), timeout=10)
            res.raise_for_status()
            soup = BeautifulSoup(res.text, 'html.parser')
            script_tags = soup.find_all('script', {'crossorigin': True})
            urls = [tag.get('src') for tag in script_tags if tag.get('src') and tag.get('src').startswith('https')]
            if not urls:
                raise Exception('Kh√¥ng t√¨m th·∫•y URL script')
            
            res = requests.get(urls[-1], headers=get_headers(), timeout=10)
            res.raise_for_status()
            
            # T√¨m client_id b·∫±ng nhi·ªÅu c√°ch kh√°c nhau
            client_id = None
            patterns = [
                r',client_id:"([^"]+)"',
                r'"client_id":"([^"]+)"',
                r'client_id:"([^"]+)"',
                r'client_id=([a-zA-Z0-9]+)'
            ]
            
            for pattern in patterns:
                match = re.search(pattern, res.text)
                if match:
                    client_id = match.group(1)
                    break
            
            if not client_id:
                raise Exception('Kh√¥ng t√¨m th·∫•y client_id trong script')

            # L∆∞u client_id v√†o t·ªáp
            with open(client_id_file, 'w') as file:
                file.write(client_id)
            
            print(f"ƒê√£ l·∫•y client_id m·ªõi: {client_id[:10]}...")
            return client_id
            
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ l·∫•y client ID: {e}")
            # Th·ª≠ s·ª≠ d·ª•ng client_id m·∫∑c ƒë·ªãnh
            default_client_ids = [
                'FZ4N7j5n7REhvxORW9Arr4NPHiWN2Tcu',
                'iZIs9mchVcX5lhVRyQGGAYlNPVldzAoJ',
                'c3a076e7ac6b0b759e8b1040ba2af808'
            ]
            
            for default_id in default_client_ids:
                try:
                    # Test client_id
                    test_url = f'https://api-v2.soundcloud.com/resolve?url=https://soundcloud.com/soundcloud&client_id={default_id}'
                    test_response = requests.get(test_url, headers=get_headers(), timeout=5)
                    if test_response.status_code == 200:
                        with open(client_id_file, 'w') as file:
                            file.write(default_id)
                        print(f"S·ª≠ d·ª•ng client_id m·∫∑c ƒë·ªãnh: {default_id[:10]}...")
                        return default_id
                except:
                    continue
            
            error_message = Message(text="‚ùå Kh√¥ng th·ªÉ l·∫•y client ID. API SoundCloud c√≥ th·ªÉ ƒë√£ thay ƒë·ªïi.")
            client.replyMessage(error_message, message_object, thread_id, thread_type)
            return None

    def wait_for_client_id():
        """ƒê·ª£i cho ƒë·∫øn khi l·∫•y ƒë∆∞·ª£c client ID t·ª´ SoundCloud."""
        max_attempts = 3
        for attempt in range(max_attempts):
            client_id = get_client_id()
            if client_id:
                return client_id
            print(f"L·∫ßn th·ª≠ {attempt + 1}/{max_attempts} - ƒêang ch·ªù client ID...")
            if attempt < max_attempts - 1:
                time.sleep(2)  # ƒê·ª£i 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
        return None

    def get_headers():
        """T·∫°o ti√™u ƒë·ªÅ ng·∫´u nhi√™n cho y√™u c·∫ßu HTTP."""
        user_agent = UserAgent()
        headers = {
            "User-Agent": user_agent.random,
            "Accept-Language": random.choice([
                "en-US,en;q=0.9",
                "fr-FR,fr;q=0.9",
                "es-ES,es;q=0.9",
                "de-DE,de;q=0.9",
                "zh-CN,zh;q=0.9"
            ]),
            "Referer": 'https://soundcloud.com/',
            "Upgrade-Insecure-Requests": "1"
        }
        return headers 

    def search_song(query):
        """T√¨m ki·∫øm b√†i h√°t tr√™n SoundCloud v√† tr·∫£ v·ªÅ URL, ti√™u ƒë·ªÅ v√† ·∫£nh b√¨a c·ªßa b√†i h√°t ƒë·∫ßu ti√™n t√¨m th·∫•y."""
        try:
            link_url = 'https://soundcloud.com'
            headers = get_headers()
            search_url = f'https://m.soundcloud.com/search?q={requests.utils.quote(query)}'
            messagesend = Message(text="ùòâùò∞ùòµ ùòãùò¢ùòØùò® ùòõùò™ùòÆ ùòíùò™ùò¶ùòÆ ùòãùò∂ùò¢ ùòõùò≥ùò¶ùòØ ùòõùò©ùò∞ùòØùò® ùòõùò™ùòØùò© ùòîùò¢ ùòâùò¢ùòØ ùòïùò©ùò¢ùò±‚ô°")
            client.replyMessage(messagesend, message_object, thread_id, thread_type,ttl=2000000000000000)
            response = requests.get(search_url, headers=headers)
            response.raise_for_status()
            html_content = response.text
            soup = BeautifulSoup(html_content, 'html.parser')
            url_pattern = re.compile(r'^/[^/]+/[^/]+$')
            for element in soup.select('div > ul > li > div'):
                a_tag = element.select_one('a')
                if a_tag and a_tag.has_attr('href'):
                    relative_url = a_tag['href']
                    if url_pattern.match(relative_url):
                        title = a_tag.get('aria-label', '')
                        url = link_url + relative_url
                        img_tag = element.select_one('img')
                        if img_tag and img_tag.has_attr('src'):
                            cover_url = img_tag['src']
                        else:
                            cover_url = None 
                    
                        return url, title, cover_url
            return None, None, None
        except Exception as e:
            print(f"L·ªói khi t√¨m ki·∫øm b√†i h√°t: {e}")
            return None, None, None

    def download(link):
        """L·∫•y v√† in ra URL √¢m thanh t·ª´ SoundCloud."""
        try:
            client_id = wait_for_client_id()  # ƒê·ª£i cho ƒë·∫øn khi l·∫•y ƒë∆∞·ª£c client_id
            if not client_id:
                print("Kh√¥ng th·ªÉ l·∫•y client_id")
                return None
                
            headers = get_headers()
            api_url = f'https://api-v2.soundcloud.com/resolve?url={link}&client_id={client_id}'
            print(f"ƒêang g·ªçi API: {api_url}")
            
            response = requests.get(api_url, headers=headers, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            # Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu media kh√¥ng
            if 'media' not in data or 'transcodings' not in data['media']:
                print("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu media trong ph·∫£n h·ªìi")
                return None
            
            # T√¨m URL progressive (MP3)
            progressive_url = None
            transcodings = data['media']['transcodings']
            
            for transcoding in transcodings:
                if (transcoding.get('format', {}).get('protocol') == 'progressive' and
                    'mp3' in transcoding.get('format', {}).get('mime_type', '').lower()):
                    progressive_url = transcoding['url']
                    break
            
            if not progressive_url:
                # Th·ª≠ t√¨m b·∫•t k·ª≥ URL progressive n√†o
                progressive_url = next((t['url'] for t in transcodings if t['format']['protocol'] == 'progressive'), None)
            
            if not progressive_url:
                print("Kh√¥ng t√¨m th·∫•y URL √¢m thanh progressive")
                return None
            
            # L·∫•y URL √¢m thanh th·ª±c t·∫ø
            auth_param = f"&track_authorization={data.get('track_authorization', '')}" if data.get('track_authorization') else ""
            final_url = f'{progressive_url}?client_id={client_id}{auth_param}'
            
            response = requests.get(final_url, headers=headers, timeout=10)
            response.raise_for_status()
            url_data = response.json()
            final_audio_url = url_data.get('url')
            
            if not final_audio_url:
                print("Kh√¥ng l·∫•y ƒë∆∞·ª£c URL √¢m thanh cu·ªëi c√πng")
                return None
                
            print(f"ƒê√£ l·∫•y ƒë∆∞·ª£c URL √¢m thanh: {final_audio_url[:50]}...")
            return final_audio_url
            
        except requests.exceptions.RequestException as e:
            print(f"L·ªói k·∫øt n·ªëi khi t·∫£i √¢m thanh: {e}")
            return None
        except Exception as e:
            print(f"L·ªói khi t·∫£i √¢m thanh: {e}")
            return None

    def save_file_to_cache(url, filename):
        """T·∫£i v√† l∆∞u file v√†o th∆∞ m·ª•c con cache."""
        try:
            response = requests.get(url, headers=get_headers())
            response.raise_for_status()
            cache_dir = os.path.join(os.path.dirname(__file__), 'cache')
            os.makedirs(cache_dir, exist_ok=True)
            file_path = os.path.join(cache_dir, filename)
            with open(file_path, 'wb') as file:
                file.write(response.content)
            
            print(f"T·∫£i file th√†nh c√¥ng! ƒê√£ l∆∞u t·∫°i {file_path}")
            return file_path
        except Exception as e:
            print(f"L·ªói khi t·∫£i file: {e}")
            return None

    def upload_to_uguu(file_path):
        """T·∫£i l√™n t·ªáp t·ªõi Uguu.se v√† tr·∫£ v·ªÅ URL."""
        url = "https://uguu.se/upload"
        try:
            with open(file_path, 'rb') as file:
                files = {'files[]': (os.path.basename(file_path), file)}
                response = requests.post(url, files=files, headers=get_headers())
                response.raise_for_status()
            response_text = response.text
            if "https:" in response_text:
                start = response_text.find("https:")
                end = response_text.find(" ", start)
                if end == -1:
                    end = len(response_text)
                url = response_text[start:end]
                return url.replace("\\", "")  
            else:
                return "Kh√¥ng t√¨m th·∫•y URL trong ph·∫£n h·ªìi."
        except Exception as e:
            print(f"L·ªói khi t·∫£i l√™n: {e}")
            return None

    def delete_file(file_path):
        """X√≥a t·ªáp sau khi s·ª≠ d·ª•ng."""
        try:
            os.remove(file_path)
            print(f"ƒê√£ x√≥a t·ªáp: {file_path}")
        except Exception as e:
            print(f"L·ªói khi x√≥a t·ªáp: {e}")

    if tenbaihat:
        print(f"T√™n b√†i h√°t t√¨m th·∫•y: {tenbaihat}")
        link, title, cover = search_song(tenbaihat)
        if link:
            print(f"URL b√†i h√°t t√¨m th·∫•y: {link}")
            
            # L·∫•y URL √¢m thanh
            audio_url = download(link)
            
            if audio_url:
                # T·∫£i file √¢m thanh
                mp3_file = save_file_to_cache(audio_url, 'downloaded_file.mp3')
                if mp3_file:
                    upload_response = upload_to_uguu(mp3_file)
                    
                    if upload_response and upload_response != "Kh√¥ng t√¨m th·∫•y URL trong ph·∫£n h·ªìi.":
                        ulrp = upload_response.replace('"', '').replace(',', '')
                        
                        # X·ª≠ l√Ω ·∫£nh b√¨a
                        cover_file = None
                        if cover:
                            try:
                                cover_response = requests.get(cover, timeout=5)
                                if cover_response.status_code == 200:
                                    cover_filename = cover.rsplit("/", 1)[-1]
                                    if not cover_filename.endswith(('.jpg', '.jpeg', '.png')):
                                        cover_filename += '.jpg'
                                    cover_file = cover_filename
                                    with open(cover_file, "wb") as f:
                                        f.write(cover_response.content)
                            except Exception as e:
                                print(f"L·ªói khi t·∫£i ·∫£nh b√¨a: {e}")
                                cover_file = None
                        
                        # G·ª≠i tin nh·∫Øn v·ªõi th√¥ng tin b√†i h√°t
                        messagesend = Message(text=f"ùëáùëíùëõ ùëèùëéùëñ ‚Ñéùëéùë°:üê≥{title}‚ùÑÔ∏è")
                        
                        if cover_file and os.path.exists(cover_file):
                            try:
                                client.sendLocalImage(cover_file, thread_id, thread_type, message=messagesend, width=240, height=240, ttl=120000000000)
                            except:
                                client.replyMessage(messagesend, message_object, thread_id, thread_type)
                        else:
                            client.replyMessage(messagesend, message_object, thread_id, thread_type)
                        
                        # G·ª≠i file √¢m thanh
                        try:
                            client.sendRemoteVoice(voiceUrl=ulrp, thread_id=thread_id, thread_type=thread_type, ttl=12000000000000)
                        except Exception as e:
                            print(f"L·ªói khi g·ª≠i voice: {e}")
                            error_msg = Message(text="‚ùå L·ªói khi g·ª≠i file √¢m thanh.")
                            client.replyMessage(error_msg, message_object, thread_id, thread_type)
                        
                        # D·ªçn d·∫πp file
                        delete_file(mp3_file)
                        if cover_file and os.path.exists(cover_file):
                            delete_file(cover_file)
                    else:
                        print("Kh√¥ng th·ªÉ t·∫£i l√™n Uguu.se.")
                        error_msg = Message(text="‚ùå Kh√¥ng th·ªÉ t·∫£i l√™n server. Vui l√≤ng th·ª≠ l·∫°i.")
                        client.replyMessage(error_msg, message_object, thread_id, thread_type)
                        delete_file(mp3_file)
                else:
                    print("Kh√¥ng th·ªÉ t·∫£i file √¢m thanh.")
                    error_msg = Message(text="‚ùå Kh√¥ng th·ªÉ t·∫£i file √¢m thanh. Vui l√≤ng th·ª≠ l·∫°i.")
                    client.replyMessage(error_msg, message_object, thread_id, thread_type)
            else:
                print("Kh√¥ng th·ªÉ l·∫•y URL √¢m thanh.")
                error_msg = Message(text="‚ùå Kh√¥ng th·ªÉ l·∫•y link √¢m thanh. B√†i h√°t c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø ho·∫∑c kh√¥ng t·ªìn t·∫°i.")
                client.replyMessage(error_msg, message_object, thread_id, thread_type)
        else:
            print("Kh√¥ng t√¨m th·∫•y b√†i h√°t.")
            error_msg = Message(text="‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t. Vui l√≤ng th·ª≠ t·ª´ kh√≥a kh√°c.")
            client.replyMessage(error_msg, message_object, thread_id, thread_type)
    else:
        print("T√™n b√†i h√°t kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.")

def get_mitaizl():
    return {
        'nh·∫°c': handle_nhac_command
    }

