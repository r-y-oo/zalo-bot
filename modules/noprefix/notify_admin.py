import datetime
import pytz
from zlapi.models import Message, ThreadType
from config import ADMIN
import json
import os

des = {
    'version': "1.0.0",
    'credits': "Nguy·ªÖn ƒê·ª©c T√†i",
    'description': "Th√¥ng b√°o admin khi c√≥ ng∆∞·ªùi d√πng bot"
}

def get_user_info_cache_file():
    """ƒê∆∞·ªùng d·∫´n file cache th√¥ng tin user"""
    return 'modules/cache/user_activity.json'

def load_user_activity():
    """Load th√¥ng tin ho·∫°t ƒë·ªông user t·ª´ cache"""
    try:
        cache_file = get_user_info_cache_file()
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"L·ªói load user activity: {e}")
    return {}

def save_user_activity(data):
    """L∆∞u th√¥ng tin ho·∫°t ƒë·ªông user v√†o cache"""
    try:
        cache_file = get_user_info_cache_file()
        os.makedirs(os.path.dirname(cache_file), exist_ok=True)
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"L·ªói save user activity: {e}")

def get_user_name_safe(client, user_id):
    """L·∫•y t√™n user an to√†n"""
    try:
        user_info = client.fetchUserInfo(user_id)
        if user_info and user_info.userInfo:
            return user_info.userInfo.get(user_id, {}).get('name', f'User_{user_id[-8:]}')
    except:
        pass
    return f'User_{user_id[-8:]}'

def get_group_name_safe(client, thread_id):
    """L·∫•y t√™n group an to√†n"""
    try:
        group_info = client.fetchGroupInfo(thread_id)
        if group_info and group_info.gridInfoMap:
            return group_info.gridInfoMap.get(thread_id, {}).name or f'Group_{thread_id[-8:]}'
    except:
        pass
    return f'Group_{thread_id[-8:]}'

def should_notify_admin(user_id, command):
    """Ki·ªÉm tra c√≥ n√™n th√¥ng b√°o admin kh√¥ng (tr√°nh spam)"""
    activity_data = load_user_activity()
    
    current_time = datetime.datetime.now()
    user_key = f"{user_id}_{command}"
    
    # Ki·ªÉm tra l·∫ßn cu·ªëi th√¥ng b√°o
    if user_key in activity_data:
        last_notify = datetime.datetime.fromisoformat(activity_data[user_key]['last_notify'])
        # Ch·ªâ th√¥ng b√°o n·∫øu ƒë√£ qu√° 30 ph√∫t
        if (current_time - last_notify).total_seconds() < 1800:  # 30 ph√∫t
            return False
    
    # C·∫≠p nh·∫≠t th·ªùi gian th√¥ng b√°o
    activity_data[user_key] = {
        'last_notify': current_time.isoformat(),
        'count': activity_data.get(user_key, {}).get('count', 0) + 1
    }
    
    save_user_activity(activity_data)
    return True

def notify_admin_usage(message, message_object, thread_id, thread_type, author_id, client):
    """H√†m ch√≠nh ƒë·ªÉ th√¥ng b√°o admin"""
    
    # Kh√¥ng th√¥ng b√°o n·∫øu ch√≠nh admin s·ª≠ d·ª•ng
    if str(author_id) == str(ADMIN):
        return
    
    # Ch·ªâ th√¥ng b√°o cho m·ªôt s·ªë commands quan tr·ªçng
    important_commands = ['system', 'admin', 'bot', 'hi', 'hello']
    command_used = message.lower().strip()
    
    if command_used not in important_commands:
        return
    
    # Ki·ªÉm tra c√≥ n√™n th√¥ng b√°o kh√¥ng (tr√°nh spam)
    if not should_notify_admin(author_id, command_used):
        return
    
    try:
        # L·∫•y th√¥ng tin user v√† group
        user_name = get_user_name_safe(client, author_id)
        
        # L·∫•y th·ªùi gian hi·ªán t·∫°i (Vi·ªát Nam)
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        current_time = datetime.datetime.now(vn_tz).strftime('%d/%m/%Y %H:%M:%S')
        
        # T·∫°o th√¥ng b√°o kh√°c nhau cho group v√† chat ri√™ng
        if thread_type == ThreadType.GROUP:
            group_name = get_group_name_safe(client, thread_id)
            notification_text = f"""
ü§ñ BOT ACTIVITY ALERT ü§ñ

üë§ User: {user_name}
üÜî ID: {author_id}
üí¨ Command: "{command_used}"
üì± Trong Group: {group_name}
üïê Th·ªùi gian: {current_time}

üìç Thread ID: {thread_id}
"""
        else:
            notification_text = f"""
ü§ñ BOT ACTIVITY ALERT ü§ñ

üë§ User: {user_name}
üÜî ID: {author_id}
üí¨ Command: "{command_used}"
üì± Chat ri√™ng
üïê Th·ªùi gian: {current_time}

üìç Thread ID: {thread_id}
"""
        
        # G·ª≠i th√¥ng b√°o ƒë·∫øn admin
        client.sendMessage(
            notification_text.strip(),
            ADMIN,
            ThreadType.USER
        )
        
        print(f"‚úÖ ƒê√£ th√¥ng b√°o admin v·ªÅ ho·∫°t ƒë·ªông: {user_name} d√πng '{command_used}'")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi th√¥ng b√°o admin: {e}")

def get_mitaizl():
    """
    Tr·∫£ v·ªÅ dict c√°c commands s·∫Ω trigger th√¥ng b√°o admin
    Ch·ªâ monitor m·ªôt s·ªë commands quan tr·ªçng
    """
    return {
        'system': notify_admin_usage,
        'admin': notify_admin_usage,
    }